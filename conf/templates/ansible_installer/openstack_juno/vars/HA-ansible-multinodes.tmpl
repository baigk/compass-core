#set cluster_name = $getVar('name', '')
#set controllers = $getVar('controller', [])
#set computers = $getVar('compute', [])
#set network_cfg = $getVar('network_cfg', {})
#set ip_settings= $getVar('ip_settings', {})
#set neutron_cfg = $getVar('neutron_config', {})

#set has = $getVar('ha', [])
#set ha_vip = $getVar('ha_vip', [])
#if not $isinstance($controllers, list)
    #set controllers = [$controllers]
#end if
#if not $isinstance($computers, list)
    #set computers = [$computers]
#end if
#if not $isinstance($has, list)
    #set has = [$has]
#end if

#for network in $controllers
    #set network_internal_nic = $network.install.interface
INTERNAL_INTERFACE: $network_internal_nic
#end for

ip_settings: $ip_settings
host_ip_settings: "{{ ip_settings[inventory_hostname] }}"
db_host: $ha_vip
rabbit_host: $ha_vip

network_cfg: $network_cfg
internal_interface: "ansible_{{ INTERNAL_INTERFACE }}"
internal_ips:
#for $host, $ip_setting in $ip_settings.items()
#for $ip_info in $ip_setting
#if $ip_info.name == "mgmt"
  $host: $ip_info.ip
#end if
#end for
#end for

internal_ip: "{{ internal_ips[inventory_hostname] }}"
identity_host: "{{ internal_ip }}"
controllers_host: "{{ internal_ip }}"
storage_controller_host: "{{ internal_ip }}"
compute_controller_host: "{{ internal_ip }}"
image_host: "{{ internal_ip }}"
network_server_host: "{{ internal_ip }}"
dashboard_host: "{{ internal_ip }}"

haproxy_hosts:
#for $item in $has
  $item["hostname"]:
#for $ip_info in $ip_settings[$item["hostname"]]
#if $ip_info["name"] == "mgmt"
    $ip_info["ip"]
#end if
#end for
#end for

HA_CLUSTER:
#set first_node=1
#for $item in $has
  $item["hostname"]:
#for $ip_info in $ip_settings[$item["hostname"]]
#if $ip_info["name"] == "mgmt"
#if $first_node == 0
    $ip_info["ip"]
#else
    ''
#end if
#end if
#end for
#set $first_node=0
#end for

HA_VIP: $ha_vip
ERLANG_TOKEN: YOWSJSJIGGAUFZTIBRAD
#set credentials = $getVar('service_credentials', {})
#set console_credentials = $getVar('console_credentials', {})
#set rabbit_username = $credentials.rabbitmq.username
#set rabbit_password = $credentials.rabbitmq.password
#set rabbit_username = $credentials.rabbitmq.username
#set rabbit_password = $credentials.rabbitmq.password
#set keystone_dbpass = $credentials.identity.password
#set glance_dbpass = $credentials.image.password
#set glance_pass = $console_credentials.image.password
#set nova_dbpass = $credentials.compute.password
#set nova_pass = $console_credentials.compute.password
#set dash_dbpass = $credentials.dashboard.password
#set cinder_dbpass = $credentials.volume.password
#set cinder_pass = $console_credentials.volume.password
#set admin_pass = $console_credentials.admin.password
#set neutron_pass = $console_credentials.network.password

cluster_name: $cluster_name

odl_controller: 10.1.0.15

DEBUG: true
VERBOSE: true
NTP_SERVER_LOCAL: "{{ controllers_host }}"
DB_HOST: "{{ db_host }}"
MQ_BROKER: rabbitmq

OPENSTACK_REPO: cloudarchive-juno.list
juno_cloud_archive: deb http://ubuntu-cloud.archive.canonical.com/ubuntu trusty-updates/juno main
ADMIN_TOKEN: admin
CEILOMETER_TOKEN: c095d479023a0fd58a54
erlang.cookie: DJJVECFMCJPVYQTJTDWG

RABBIT_USER: $rabbit_username
RABBIT_PASS: $rabbit_password
KEYSTONE_DBPASS: $keystone_dbpass
DEMO_PASS: demo_secret
ADMIN_PASS: $admin_pass
GLANCE_DBPASS: $glance_dbpass
GLANCE_PASS: $glance_pass
NOVA_DBPASS: $nova_dbpass
NOVA_PASS: $nova_pass
DASH_DBPASS: $dash_dbpass
CINDER_DBPASS: $cinder_dbpass
CINDER_PASS: $cinder_pass
NEUTRON_DBPASS: $neutron_pass
NEUTRON_PASS: $neutron_pass
NEUTRON_TYPE_DRIVERS: ['flat', 'gre', 'vxlan', 'vlan']
NEUTRON_TENANT_NETWORK_TYPES: ['vlan']
#NEUTRON_MECHANISM_DRIVERS: ['opendaylight']
NEUTRON_MECHANISM_DRIVERS: ['openvswitch']
NEUTRON_TUNNEL_TYPES: []
METADATA_SECRET: metadata_secret
WSREP_SST_USER: wsrep_sst
WSREP_SST_PASS: wsrep_sst_sercet

INSTANCE_TUNNELS_INTERFACE_IP_ADDRESS: 10.1.1.21

#set stop=0
#for $host, $ip_setting in $ip_settings.items()
#for $ip_info in $ip_setting
#if $ip_info.name == "external" and $stop == 0
EXTERNAL_NETWORK_CIDR: $ip_info.cidr
EXTERNAL_NETWORK_GATEWAY: $ip_info.gw
FLOATING_IP_START: $ip_info.floating_ip_ranges[0]
FLOATING_IP_END: $ip_info.floating_ip_ranges[1]
#set stop=1
#end if
#end for
#end for


#build_in_image: http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img
build_in_image: http://192.168.121.12:9999/img/cirros-0.3.3-x86_64-disk.img
build_in_image_name: cirros-0.3.3-x86_64-disk.img

physical_device: /dev/sdb

odl_username: admin
odl_password: admin
odl_api_port: 8080

odl_pkg_url: https://nexus.opendaylight.org/content/groups/public/org/opendaylight/integration/distribution-karaf/0.2.2-Helium-SR2/distribution-karaf-0.2.2-Helium-SR2.tar.gz
odl_pkg_name: karaf.tar.gz
odl_home: "/opt/opendaylight-0.2.2/"
odl_base_features: ['config', 'standard', 'region', 'package', 'kar', 'ssh', 'management', 'http', 'odl-base-all','odl-aaa-authn','odl-restconf','odl-nsf-all','odl-adsal-northbound','odl-mdsal-apidocs', 'odl-openflowplugin-all']
odl_extra_features: ['odl-l2switch-switch', 'odl-ovsdb-plugin', 'odl-ovsdb-openstack', 'odl-ovsdb-northbound','odl-dlux-core', 'odl-restconf-all', 'odl-mdsal-clustering', 'odl-openflowplugin-flow-services', 'odl-netconf-connector', 'odl-netconf-connector-ssh', 'jolokia-osgi']
odl_features: "{{ odl_base_features + odl_extra_features }}"
odl_api_port: 8080

